---
description: User Story Standards
alwaysApply: false
---

# User Story Standards

User stories must capture end-user value and follow the standard format.

## User Persona Definition

For effective UX work, each user story should begin with a clear definition of the user persona. This persona should be a semi-fictional representation of your ideal user based on real data and some educated guesses about demographics, behavior patterns, motivations, and goals. This helps in understanding the user's needs and designing solutions that truly address them.

**Structure:**

- **Name:** A descriptive name for the persona (e.g., "Data Analyst Dave", "System Administrator Sarah").
- **Description:** A brief paragraph outlining who this persona is, their role, their primary goals, and any relevant pain points or motivations related to the system.

## User Story Format

All user stories must follow this structure:

- **As a** {User Persona}
- **I want to** {Action or Goal}
- **so that** {Benefit or Value}

## Acceptance Criteria Requirements

Acceptance criteria must be:

- **User-Focused**: Describe outcomes from the user's perspective, not technical implementation
- **Non-Technical**: Avoid mentioning specific technologies, frameworks, or implementation details
- **Observable Outcomes**: Focus on what the user experiences or achieves
- **Specific and Verifiable**: Can be objectively tested from a user's perspective
- **Complete**: Cover all aspects of the user story
- **Testable**: Can be validated through user-facing tests

## EARS Format for Acceptance Criteria

Use Easy Approach to Requirements Syntax (EARS) for precision, focusing on user-observable outcomes:

- **WHEN** [user action/situation] **THEN** [user] **SHALL** [experience/achieve]
- **IF** [user condition] **THEN** [user] **SHALL** [experience/achieve]
- **WHILE** [user context] **THE USER SHALL** [experience/achieve]

**Examples:**

- ✅ WHEN I view Pkl code THEN I SHALL see different code elements in different colors
- ❌ WHEN Pkl code is processed THEN the system SHALL apply syntax highlighting rules
- ✅ WHEN I scan the code THEN I SHALL quickly identify different language constructs  
- ❌ WHEN the parser runs THEN it SHALL tokenize keywords and apply CSS classes

## User Persona Guidelines

- Use specific, realistic personas (for example, "Data Analyst", "System Administrator")
- Avoid generic terms like "user" when possible
- Consider different user types and their specific needs
- Align personas with actual system users

## Value Proposition

The "so that" clause must:

- Clearly articulate business or user value
- Be measurable when possible
- Connect to broader organizational goals
- Avoid technical implementation details

## Success Metrics

Include measurable success criteria:

- **Primary Metric**: The key metric that validates the story's value
- **Secondary Metrics**: Additional metrics to monitor for intended/unintended consequences
- Use quantifiable measures when possible (for example, "5% decrease in error rate")

## Document Creation and Storage

New user story documents should be created by copying this `standards-user-story.md` file as a template. They are derived from and must adhere to the guidelines set forth in the project's architecture documents.

**Storage Location:**
User story documents for specific features or work items should be stored within the `.work-items/{feature_name}/` directory, named `user-story.md`. For example, a user story document for the `pkl-highlighting` feature would be located at `.work-items/pkl-highlighting/user-story.md`. This structure ensures that user story documents are co-located with their related requirements and tasks, providing a clear, scalable, and traceable organization for project specifications.
